# README - Chess AI Project

## 1. プロジェクト概要

このプロジェクトは、PGN（Portable Game Notation）形式のチェスの対局データを用いて学習したAIを実行するものです。実行ファイルを使用することで、指定されたデータセットをもとにAIがチェスの指し手を予測します。

## 2. 動作環境

- **OS:**
  - Linux (Ubuntu 20.04+ / WSL2)
- **Python:** 3.11.5
- **CUDA:** **なし**（CPUのみ対応）
  - **GPUを使用する場合:** CUDA 11.8 以上 + cuDNN 8.6 以上が必要

## 3. 必要なファイル

以下のファイルを同じフォルダに配置してください。

- `fukuchi_chess-cnn` (実行ファイル)
- `testdata/1500-1600.pgn` (PGNデータ)

## 4. 実行方法

1. 実行権限を付与:

   chmod +x fukuchi_chess-cnn

2. 実行:

   ./fukuchi_chess-cnn

## 5. トラブルシューティング

- **「FileNotFoundError: 1500-1600.pgn が見つからない」
  → `testdata/1500-1600.pgn` が正しく配置されているか確認してください。
- **「Permission denied」
  → `chmod +x fukuchi_chess-cnn` を実行してください。
- **「動作しない / 予期せぬエラーが発生する」
  → OSのバージョンとエラーメッセージを確認し、READMEの情報と比較してください。

## 6 本プロジェクトの特徴と技術的工夫
本プロジェクトでは、チェスの指し手を予測するための 畳み込みニューラルネットワーク（CNN） を用いた機械学習モデルを開発しました。一般的なチェスAIに比べ、ラベリング手法、盤面のエンコード方法、モデルの軽量性 において工夫を施しており、計算コストを抑えつつも合理的な手を予測できるよう設計しています。

1. ラベリング手法の工夫
一般的なチェスAIでは、移動先のマス（64通り） のみを分類ラベルとすることが多いですが、本モデルでは 「駒の種類 × 移動先のマス」（6 × 64 = 384通り） をラベルとして使用しています。

これにより、モデルは 「どの駒がどこに動くのか」 を正確に学習できるため、駒の特性を考慮した指し手を予測しやすくなります。例えば、通常の手法では「d2 → d4」がポーンの指し手なのかナイトの指し手なのか区別されませんが、本モデルでは明確に区別されるため、より戦略的な指し手の予測が可能になります。

2. 盤面のエンコード方法の工夫
従来のチェスCNNでは、8×8×12 の盤面エンコードが一般的ですが、本モデルでは 8×8×17 のエンコードを採用しました。

追加した5チャンネルには以下の情報が含まれており、モデルがよりルールを意識した手を学習できるようになっています。
手番情報（どちらのプレイヤーの手番か）
キャスリング権（キングとルークの特殊移動の可否）

これにより、単なる駒の配置だけでなく、局面の状態やルールを考慮した指し手予測が可能になっています。

3. 軽量なモデル設計
一般的なチェスAIは ResNetやTransformer などの深層学習モデルを使用し、大規模な計算資源を必要とします。一方、本モデルは CNN2層 + Pooling + Flatten のシンプルな構造を採用し、計算コストを大幅に抑えています。

その結果、以下のメリットがあります。
軽量であり、GPUがなくても動作可能（CPUのみの環境でも実行可能）
計算資源が限られた環境でも利用できる
シンプルな構造ながら、ルールを考慮した指し手予測が可能

まとめ
本プロジェクトでは、駒の種類を考慮したラベリング、ルール情報を含めたエンコード、軽量なモデル構造 という3つの点に重点を置いて開発を行いました。
従来の手法と比較して、駒ごとの動きを正確に学習し、ルールを考慮した指し手の予測が可能でありながら、計算コストを抑えて実装できる という特徴を持っています。

本モデルの工夫により、リソースの限られた環境でも動作し、シンプルながらも戦略的な手を予測できるチェスAI を実現を目指しました。









